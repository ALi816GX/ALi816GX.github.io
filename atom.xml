<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Leo&#39;s Blog</title>
  
  <subtitle>The more you learn, the more ignorant</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://ali816gx.github.io/"/>
  <updated>2019-11-07T17:19:36.000Z</updated>
  <id>https://ali816gx.github.io/</id>
  
  <author>
    <name>Leo Lin</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Vue Unit Test (vue单元测试)</title>
    <link href="https://ali816gx.github.io/2019/10/27/Vue_Unit_Test/"/>
    <id>https://ali816gx.github.io/2019/10/27/Vue_Unit_Test/</id>
    <published>2019-10-27T15:46:25.000Z</published>
    <updated>2019-11-07T17:19:36.000Z</updated>
    
    <content type="html"><![CDATA[<p>概述:<br>Vue Test Utils 通过将它们隔离挂载，模拟必要的输入 (prop、注入和用户事件等) 和对输出 (渲染结果、触发的自定义事件等) 的断言来测试 Vue 组件  </p><p>点击-学习官网 <a href="https://vue-test-utils.vuejs.org/zh/" target="_blank" rel="noopener">Vue unit test</a>  </p><h1 id="配置使用环境"><a href="#配置使用环境" class="headerlink" title="配置使用环境"></a>配置使用环境</h1><ul><li>1 按官网指示:假定 安装并配置好了 webpack、vue-loader 和 Babel 等</li><li>2 此演示项目基于之前使用 yarn 搭建的Vue + Vuex 配置成的 Simple 手脚架并修改配置<br>  <strong>转用 npm</strong>  搭建webpack + Babel等</li><li>3 在准备webpack 和 Babel 主要遇到的问题：  <ul><li><ol><li>npm run serve : webpack打包踩坑之TypeError: Cannot read property ‘bindings’ of null <a href="https://www.cnblogs.com/Joe-and-Joan/p/10335881.html" target="_blank" rel="noopener">参考</a> </li></ol></li><li><ol start="2"><li>npm run test  :Requires Babel “^7.0.0-0”, but was loaded with “6.26.3”. If you are… <a href="http://www.pianshen.com/article/7755137420/" target="_blank" rel="noopener">参考</a></li></ol></li><li><ol start="3"><li>webStorm 配置 Jest 引起:  Error command “test:unit” does not exist<ul><li>解决：找到Jest配置-&gt;Jest Package -&gt; 选中 node_modules/jest 目录即可</li></ul></li></ol></li></ul></li><li>4 Vue Test Utils <a href="https://github.com/ALi816GX/Vue-Unit-Test.git" target="_blank" rel="noopener">手脚架地址</a> -&gt; branch[‘unitTest’’]</li></ul><h1 id="项目使用"><a href="#项目使用" class="headerlink" title="项目使用"></a>项目使用</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">1. npm install</span><br><span class="line">2. 项目启动：npm run serve</span><br><span class="line">3. 项目测试：npm run test 或者 jest</span><br><span class="line">4. 测试覆盖率：jest --coverage</span><br><span class="line"></span><br><span class="line">Tips：</span><br><span class="line">    1. &apos;@&apos;不识别：需要在webstorm里面webpack-&gt;config-&gt;配置指定项目文件build/alias.config.js</span><br><span class="line">    2. 测试文件中Jest方法有unresolved..等提醒：需在webstorm配置-&gt;javascript-&gt;lib-&gt;download Jest-&gt;选中 @type/jest</span><br><span class="line">    3. &apos;配置jest&apos;： edit run configuration -&gt; + Jest -&gt;指定Jest文件路径和工程路径</span><br><span class="line">Question:</span><br><span class="line">    该项目在linux下正常运行，在2018年webstorm版本正常跑Jest单测</span><br><span class="line">    但在2019版本jest 在测试文件中，没有 run icon 单测按钮，bug还未解决，猜测源于项目jest配置</span><br></pre></td></tr></table></figure><h1 id="测试流程"><a href="#测试流程" class="headerlink" title="测试流程"></a>测试流程</h1><p>总的来说：</p><ol><li>组件是否存在</li><li>组件的值是否正确</li><li>组件触发是否正常</li><li>组件事件引起的数据更改是否正确</li><li>如何测试store (getters,mutations,actions)</li></ol><h1 id="测试常用的知识点"><a href="#测试常用的知识点" class="headerlink" title="测试常用的知识点"></a>测试常用的知识点</h1><ul><li>wrapper: 是一个挂在组件或Vnode的包裹器（Vue test utils 的核心工具）  </li><li>localVue： 创建的一个 Vue 的本地拷贝，防止元素Vue组件被污染</li><li>mount：创建一个包含被挂载和渲染的 Vue 组件的 Wrapper.</li><li>find ：返回匹配选择器的第一个DOM节点或 Vue 组件的 Wrapper，支持标签选择和样式选择</li><li>exist: 断言 Wrapper 或 WrapperArray 是否存在。</li><li>stubs:将子组件存根,一般在测试不关注子组件的属性和值时使用</li><li>验证测试v-model,event(trigger),data,prop,emmit,赋值(setValue)，jest.fn,</li><li>技巧：通过前端调试，找到css去找到wrapper，或者debug，将所找的路径打印html()</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;概述:&lt;br&gt;Vue Test Utils 通过将它们隔离挂载，模拟必要的输入 (prop、注入和用户事件等) 和对输出 (渲染结果、触发的自定义事件等) 的断言来测试 Vue 组件  &lt;/p&gt;
&lt;p&gt;点击-学习官网 &lt;a href=&quot;https://vue-test-ut
      
    
    </summary>
    
    
      <category term="IT" scheme="https://ali816gx.github.io/categories/IT/"/>
    
    
      <category term="Vue" scheme="https://ali816gx.github.io/tags/Vue/"/>
    
      <category term="Test" scheme="https://ali816gx.github.io/tags/Test/"/>
    
      <category term="Jest" scheme="https://ali816gx.github.io/tags/Jest/"/>
    
  </entry>
  
  <entry>
    <title>Markdown基本语法总结</title>
    <link href="https://ali816gx.github.io/2019/10/14/Markdown%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95%E6%80%BB%E7%BB%93/"/>
    <id>https://ali816gx.github.io/2019/10/14/Markdown基本语法总结/</id>
    <published>2019-10-14T15:46:25.000Z</published>
    <updated>2019-10-26T10:52:09.000Z</updated>
    
    <content type="html"><![CDATA[<p>概述<br>Markdown是一种纯文本的轻量级标记语言，可简洁方便的生成结构化html文档。支持mac,windows,linux等操作系统，支持导出HTML、PDF、Word、图片等多种类型文件。</p><p>语法</p><p>1.标题<br>语法：使用 # 号可表示 1-6 级标题，一级标题对应一个 # 号，二级标题对应两个 # 号，以此类推。</p><h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h1><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><h3 id="三级标题"><a href="#三级标题" class="headerlink" title="三级标题"></a>三级标题</h3><h4 id="四级标题"><a href="#四级标题" class="headerlink" title="四级标题"></a>四级标题</h4><h5 id="五级标题"><a href="#五级标题" class="headerlink" title="五级标题"></a>五级标题</h5><h6 id="六级标题"><a href="#六级标题" class="headerlink" title="六级标题"></a>六级标题</h6><p>2.段落格式<br>（1）字体<br>语法</p><p><em>斜体文本</em></p><p><em>斜体文本</em></p><p><strong>粗体文本</strong></p><p><strong>粗体文本</strong></p><p><strong><em>粗斜体文本</em></strong></p><p><strong><em>粗斜体文本</em></strong></p><p>显示如下：</p><p>（2）下划线／删除线<br>语法：</p><p><u>下划线</u></p><p><del>删除线</del></p><p>显示效果如下所示：</p><p>（3）脚注<br>语法：</p><p>脚注格式 [^OOCL]。</p><p>[^OOCL] 东方海外是香港联交所上市公司</p><p>显示效果如下所示：</p><p>3.列表<br>（1）有序列表<br>语法： 使用星号(*)、加号(+)或是减号(-)来表示</p><ul><li><p>第一项</p></li><li><p>第二项</p></li></ul><ul><li><p>第一项</p></li><li><p>第二项</p></li></ul><ul><li><p>第一项</p></li><li><p>第二项</p></li></ul><p>显示效果如下所示：</p><p>（2）无序列表<br>语法： 使用数字并加上 . 号来表示</p><ol><li><p>第一项 </p></li><li><p>第二项</p></li></ol><p>显示效果如下所示：</p><p>4.区块<br>语法：</p><p>（1）区块引用是在段落开头使用“ &gt; ”符号 ，然后后面紧跟一个空格：</p><blockquote><p>苹果</p></blockquote><blockquote><p>微软</p></blockquote><p>（2）嵌套：一个 &gt; 符号是最外层，两个 &gt; 符号是第一层嵌套，以此类推退：</p><blockquote><p>最外层</p></blockquote><blockquote><blockquote><p>第一层嵌套</p></blockquote></blockquote><blockquote><blockquote><blockquote><p>第二层嵌套</p></blockquote></blockquote></blockquote><p>显示效果如下所示：</p><p>5.代码<br>语法：</p><p>(1)符号`包围</p><p><code>1+1=2</code>是否正确</p><p>(2)符号<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">```javascript</span><br><span class="line"></span><br><span class="line">$(document).ready(function () &#123;</span><br><span class="line"></span><br><span class="line">    alert(&apos;Hello OOCL&apos;);</span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>显示效果如下所示：</p><p>6.链接<br>语法：<a href="链接地址">链接名称</a> 或者 &lt;链接地址&gt;</p><p>这是一个链接 <a href="https://www.baidu.com/" target="_blank" rel="noopener">百度</a></p><p><a href="https://www.baidu.com/" target="_blank" rel="noopener">https://www.baidu.com/</a></p><p>显示效果如下所示：</p><p>7.图片<br>语法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">![alt 文件属性](图片地址)</span><br><span class="line"></span><br><span class="line">![alt 文件属性](图片地址 &quot;可选标题&quot;)</span><br></pre></td></tr></table></figure><p>备注：</p><p>alt：对图片的文字解释</p><p>文件属性：如PNG，IMG</p><p>“可选标题”：可有可无</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://www.baidu.com/img/dong_a38183314e67f1faa402cfb5bfc2f5a3.gif" alt="BAIDU GIF" title>                </div>                <div class="image-caption">BAIDU GIF</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://www.baidu.com/img/dong_a38183314e67f1faa402cfb5bfc2f5a3.gif" alt="BAIDU GIF" title="“百度图片”">                </div>                <div class="image-caption">“百度图片”</div>            </figure><p>显示效果如下所示：</p><p>8.表格<br>语法：</p><p>格式：</p><p>|  表头  | 表头  |</p><p>|  —-  | —-  |</p><p>| 单元格  | 单元格 |</p><p>| 单元格  | 单元格 |</p><p>补充：</p><p>对齐方式</p><p>我们可以设置表格的对齐方式：</p><p>-: 设置内容和标题栏居右对齐。</p><p>:- 设置内容和标题栏居左对齐。</p><p>:-: 设置内容和标题栏居中对齐。</p><p>（1）</p><p>| 表头 | 表头 |</p><p>|  —-  | —-  |</p><p>| 单元格  | 单元格 |</p><p>| 单元格  | 单元格 |</p><p>（2）</p><p>| 左对齐 | 右对齐 | 居中对齐 |</p><p>| :—–| —-: | :—-: |</p><p>| 单元格 | 单元格 | 单元格 |</p><p>| 单元格 | 单元格 | 单元格 |</p><p>显示效果如下所示：</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;概述&lt;br&gt;Markdown是一种纯文本的轻量级标记语言，可简洁方便的生成结构化html文档。支持mac,windows,linux等操作系统，支持导出HTML、PDF、Word、图片等多种类型文件。&lt;/p&gt;
&lt;p&gt;语法&lt;/p&gt;
&lt;p&gt;1.标题&lt;br&gt;语法：使用 # 号可表
      
    
    </summary>
    
    
      <category term="IT" scheme="https://ali816gx.github.io/categories/IT/"/>
    
    
      <category term="Markdown" scheme="https://ali816gx.github.io/tags/Markdown/"/>
    
      <category term="Office" scheme="https://ali816gx.github.io/tags/Office/"/>
    
  </entry>
  
</feed>
