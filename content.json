{"meta":{"title":"Leo's Blog","subtitle":"The more you learn, the more ignorant","description":"Update learning results once a week","author":"Leo Lin","url":"https://ali816gx.github.io","root":"/"},"pages":[{"title":"tags","date":"2019-10-19T18:10:18.000Z","updated":"2019-10-19T18:12:23.000Z","comments":true,"path":"tags/index.html","permalink":"https://ali816gx.github.io/tags/index.html","excerpt":"","text":""},{"title":"categories","date":"2019-10-19T18:14:11.000Z","updated":"2019-10-19T18:14:26.000Z","comments":true,"path":"categories/index.html","permalink":"https://ali816gx.github.io/categories/index.html","excerpt":"","text":""}],"posts":[{"title":"Vue Unit Test (vue单元测试)","slug":"Vue_Unit_Test","date":"2019-10-28T15:46:25.000Z","updated":"2021-05-18T15:14:41.000Z","comments":true,"path":"2019/10/28/Vue_Unit_Test/","link":"","permalink":"https://ali816gx.github.io/2019/10/28/Vue_Unit_Test/","excerpt":"","text":"概述:Vue Test Utils 通过将它们隔离挂载，模拟必要的输入 (prop、注入和用户事件等) 和对输出 (渲染结果、触发的自定义事件等) 的断言来测试 Vue 组件 点击-学习官网 Vue unit test 配置使用环境 1 按官网指示:假定 安装并配置好了 webpack、vue-loader 和 Babel 等 2 此演示项目基于之前使用 yarn 搭建的Vue + Vuex 配置成的 Simple 手脚架并修改配置 转用 npm 搭建webpack + Babel等 3 在准备webpack 和 Babel 主要遇到的问题： npm run serve : webpack打包踩坑之TypeError: Cannot read property ‘bindings’ of null 参考 npm run test :Requires Babel “^7.0.0-0”, but was loaded with “6.26.3”. If you are… 参考 webStorm 配置 Jest 引起: Error command “test:unit” does not exist 解决：找到Jest配置-&gt;Jest Package -&gt; 选中 node_modules/jest 目录即可 4 Vue Test Utils 手脚架地址 -&gt; branch[‘unitTest’’] 项目使用1234567891011121. npm install2. 项目启动：npm run serve3. 项目测试：npm run test 或者 jest4. 测试覆盖率：jest --coverageTips： 1. &apos;@&apos;不识别：需要在webstorm里面webpack-&gt;config-&gt;配置指定项目文件build/alias.config.js 2. 测试文件中Jest方法有unresolved..等提醒：需在webstorm配置-&gt;javascript-&gt;lib-&gt;download Jest-&gt;选中 @type/jest 3. &apos;配置jest&apos;： edit run configuration -&gt; + Jest -&gt;指定Jest文件路径和工程路径Question: 该项目在linux下正常运行，在2018年webstorm版本正常跑Jest单测 但在2019版本jest 在测试文件中，没有 run icon 单测按钮，bug还未解决，猜测源于项目jest配置 测试流程总的来说： 组件是否存在 组件的值是否正确 组件触发是否正常 组件事件引起的数据更改是否正确 如何测试store (getters,mutations,actions) 测试常用的知识点 wrapper: 是一个挂在组件或Vnode的包裹器（Vue test utils 的核心工具） localVue： 创建的一个 Vue 的本地拷贝，防止元素Vue组件被污染 mount：创建一个包含被挂载和渲染的 Vue 组件的 Wrapper. find ：返回匹配选择器的第一个DOM节点或 Vue 组件的 Wrapper，支持标签选择和样式选择 exist: 断言 Wrapper 或 WrapperArray 是否存在。 stubs:将子组件存根,一般在测试不关注子组件的属性和值时使用 验证测试v-model,event(trigger),data,prop,emmit,赋值(setValue)，jest.fn, 技巧：通过前端调试，找到css去找到wrapper，或者debug，将所找的路径打印html()","categories":[{"name":"IT","slug":"IT","permalink":"https://ali816gx.github.io/categories/IT/"}],"tags":[{"name":"Vue","slug":"Vue","permalink":"https://ali816gx.github.io/tags/Vue/"},{"name":"Test","slug":"Test","permalink":"https://ali816gx.github.io/tags/Test/"},{"name":"Jest","slug":"Jest","permalink":"https://ali816gx.github.io/tags/Jest/"}]},{"title":"Markdown基本语法总结","slug":"Markdown基本语法总结","date":"2019-10-14T15:46:25.000Z","updated":"2019-10-26T10:52:09.000Z","comments":true,"path":"2019/10/14/Markdown基本语法总结/","link":"","permalink":"https://ali816gx.github.io/2019/10/14/Markdown基本语法总结/","excerpt":"","text":"概述Markdown是一种纯文本的轻量级标记语言，可简洁方便的生成结构化html文档。支持mac,windows,linux等操作系统，支持导出HTML、PDF、Word、图片等多种类型文件。 语法 1.标题语法：使用 # 号可表示 1-6 级标题，一级标题对应一个 # 号，二级标题对应两个 # 号，以此类推。 一级标题二级标题三级标题四级标题五级标题六级标题2.段落格式（1）字体语法 斜体文本 斜体文本 粗体文本 粗体文本 粗斜体文本 粗斜体文本 显示如下： （2）下划线／删除线语法： 下划线 删除线 显示效果如下所示： （3）脚注语法： 脚注格式 [^OOCL]。 [^OOCL] 东方海外是香港联交所上市公司 显示效果如下所示： 3.列表（1）有序列表语法： 使用星号(*)、加号(+)或是减号(-)来表示 第一项 第二项 第一项 第二项 第一项 第二项 显示效果如下所示： （2）无序列表语法： 使用数字并加上 . 号来表示 第一项 第二项 显示效果如下所示： 4.区块语法： （1）区块引用是在段落开头使用“ &gt; ”符号 ，然后后面紧跟一个空格： 苹果 微软 （2）嵌套：一个 &gt; 符号是最外层，两个 &gt; 符号是第一层嵌套，以此类推退： 最外层 第一层嵌套 第二层嵌套 显示效果如下所示： 5.代码语法： (1)符号`包围 1+1=2是否正确 (2)符号12345678```javascript$(document).ready(function () &#123; alert(&apos;Hello OOCL&apos;);&#125;); 显示效果如下所示： 6.链接语法：链接名称 或者 &lt;链接地址&gt; 这是一个链接 百度 https://www.baidu.com/ 显示效果如下所示： 7.图片语法： 123![alt 文件属性](图片地址)![alt 文件属性](图片地址 &quot;可选标题&quot;) 备注： alt：对图片的文字解释 文件属性：如PNG，IMG “可选标题”：可有可无 BAIDU GIF “百度图片” 显示效果如下所示： 8.表格语法： 格式： | 表头 | 表头 | | —- | —- | | 单元格 | 单元格 | | 单元格 | 单元格 | 补充： 对齐方式 我们可以设置表格的对齐方式： -: 设置内容和标题栏居右对齐。 :- 设置内容和标题栏居左对齐。 :-: 设置内容和标题栏居中对齐。 （1） | 表头 | 表头 | | —- | —- | | 单元格 | 单元格 | | 单元格 | 单元格 | （2） | 左对齐 | 右对齐 | 居中对齐 | | :—–| —-: | :—-: | | 单元格 | 单元格 | 单元格 | | 单元格 | 单元格 | 单元格 | 显示效果如下所示：","categories":[{"name":"IT","slug":"IT","permalink":"https://ali816gx.github.io/categories/IT/"}],"tags":[{"name":"Markdown","slug":"Markdown","permalink":"https://ali816gx.github.io/tags/Markdown/"},{"name":"Office","slug":"Office","permalink":"https://ali816gx.github.io/tags/Office/"}]}]}